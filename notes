
    abs(x, /): Return the absolute value of the argument.
    float(value, default=0.0): Convert the value into a floating point number.
    int(value, default=0, base=10): Convert the value into an integer.
    round(value, precision=0, method=’common’): Round the number to a given precision.
    range([start, ]stop[, step]): Return a list containing an arithmetic progression of integers.
    log(base): Get the logarithm (default is e):
    pow(power): Get to the power
    root(n): Get square root of n

		json_query
    to_json(a, *args, **kw): convert to json
    to_nice_json(a, indent=4, sort_keys=True, *args, **kw): convert to human redable json
    to_yaml(a, *args, **kw): convert to yaml
    to_nice_yaml(a, indent=4, *args, **kw): convert to human redable yaml



    min(value, case_sensitive=False, attribute=None): Return the smallest item from the sequence.
    max(value, case_sensitive=False, attribute=None): Return the largest item from the sequence.
    first(seq): Return the first item of a sequence.
    last(seq): Return the last item of a sequence.
    length(obj, /): Return the number of items in a container.
    random(seq): Return a random item from the sequence.
    shuffle(): randomize an existing list, giving a different order every invocation
    reject(*args, **kwargs): Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding.
    reverse(value): Reverse the object or return an iterator that iterates over it the other way round.
    select(*args, **kwargs): Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding.
    sort(value, reverse=False, case_sensitive=False, attribute=None): Sort an iterable.
    sum(iterable, attribute=None, start=0): Returns the sum of a sequence of numbers plus the value of parameter ‘start’ (which defaults to 0).
    unique(value, case_sensitive=False, attribute=None): Returns a list of unique items from the the given iterable.
    union: To get a union of two lists
    intersect: To get the intersection of 2 lists (unique list of all items in both)
    difference: To get the difference of 2 lists (items in 1 that don’t exist in 2)
    symmetric_difference: to get the symmetric difference of 2 lists (items exclusive to each list)



    to_datetime(string, format=”%Y-%m-%d %H:%M:%S”): To get date object from string
    strftime(string_format, second=None): To format a date using a string



    capitalize(s): Capitalize a value. The first character will be uppercase, all others lowercase
    format(value, *args, **kwargs): Apply python string formatting on an object
    indent(s, width=4, first=False, blank=False, indentfirst=None): Return indented lines, The first line and blank lines are not indented
    join(value, d=”, attribute=None): Return a string which is the concatenation of the strings in the sequence.
    list(value): Convert the value into a list. If it was a string the returned list will be a list of characters.
    lower(s): Convert a value to lowercase.
    replace(s, old, new, count=None): Return a copy of the value with all occurrences of a substring replaced with a new one.
    reverse(value): Reverse the object or return an iterator that iterates over it the other way round.
    string(object): Make a string unicode if it isn’t already.
    trim(value): Strip leading and trailing whitespace.
    truncate(s, length=255, killwords=False, end=’…’, leeway=None): Return a truncated copy of the string.
    upper(s): Convert a value to uppercase.
    wordcount(s): Count the words in that string.
    wordwrap(s, width=79, break_long_words=True, wrapstring=None): Return a copy of the wrapped string after 79 characters.
    comment(style): allows to decorate the text with a chosen comment style.


https://stackoverflow.com/questions/44077630/ansible-to-check-diskspace-for-mounts-mentioned-as-variable


https://github.com/ansible/tower-example

groups['all'] | regex_replace('^ans.*([0-9]+)$', '\\1') | int is divisibleby 2 

auditing
https://blog.newrelic.com/engineering/ansible-auditing-tool/

add_host : docker factory,/buildah
https://blog.tomecek.net/post/building-containers-with-buildah-and-ansible/


https://www.adaltas.com/fr/2017/10/25/de-dockerfile-a-ansible-containers/


https://github.com/ansible/ansible-baseline

- status : changed / failed / success

- cli_config module


- mitogen

- démo cache

- awx


- any_errors_fatal

- max fail percentage

- no_logs

- tags


- strategy: debug
P task/host/result/vars ->Prints the value to executed a module
task.args[key] = value — upgrade the module arguments
vars[args]=value — set argument value
r(edo) — run the task again
c(continue) — Just continue
q(uit) — quit from debugger

- ansible-lint https://medium.com/faun/linting-your-ansible-playbooks-and-make-a-continuous-integration-ci-solution-bcf8b4ea4c03

- vagrant ansible



	
- import_tasks: x.yml 
  with_items: [1,2,3] 
 
This willi import x.yml one time and every imported task will now run 
and loop over 1,2,3 
 
- include_tasks: x.yml 
  with_items: [1,2,3] 
 
This will include x.yml 3 times and set the 'item' variable to 1, 2 
and 3 respectively 






- with_file


https://github.com/octplane/ansible_stdout_compact_logger





<br>
- until

```
- shell: /usr/bin/foo
  register: result
  until: result.stdout.find("all systems go") != -1
  retries: 5
  delay: 10
```

